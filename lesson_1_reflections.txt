1. How did viewing a diff between two versions of a file help you see the bug that was introduced?

I showed a direct comparision between all lines of code that had changed between versions so that
it was easy to spot the two lines that were very slightly different.

2. How oculd having easy access to the entire history of a file make you a more efficient programmer
in the long term?

I reduces the amount of time and guessowrk you spend looking for errors, since you can just 
compare diffs with a previous working version of the code. It also reduces the amount of time you
spend re-writing code when it ends up wrong, since it's easier to revert from previous versions
if something gets messed up.

3. What do you think are the pros and cons of manually choosing when to create a commit, like you
do in Git, vs having versions automatically saved, like Google Docs does?

Manual commits allow you create versions that are logically different from each other but can
still stand alone. Automatic saves may save too much or too little content and result in versions
that cant' run without putting additional work into them.

4. Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately?

Generally, Google docs do not have the degree of connectedness with each other that files that
make up a webpage would, for instance. 

5. How can you use the commands got log and git diff to view the history of files?

git diff shows you differences between two versions of a file between the selected commits, while
git log shows you a list of recent commits with information about them, including their commit ids
which can be used to compare diffs.

6. How might using version control make you more confident to make changes that could break 
something?

It's less scary to experiment and try new things the easier it is to undo any damage they may 
cause.